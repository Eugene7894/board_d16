"Нам необходимо разработать интернет-ресурс для фанатского сервера одной известной MMORPG — что-то вроде доски объявлений.
Пользователи нашего ресурса должны иметь возможность зарегистрироваться в нём по e-mail, получив письмо с кодом
подтверждения регистрации. После регистрации им становится доступно создание и редактирование объявлений. Объявления
состоят из заголовка и текста, внутри которого могут быть картинки, встроенные видео и другой контент. Пользователи
могут отправлять отклики на объявления других пользователей, состоящие из простого текста. При отправке отклика
пользователь должен получить e-mail с оповещением о нём. Также пользователю должна быть доступна приватная страница с
откликами на его объявления, внутри которой он может фильтровать отклики по объявлениям, удалять их и принимать (при
принятии отклика пользователю, оставившему отклик, также должно прийти уведомление). Кроме того, пользователь
обязательно должен определить объявление в одну из следующих категорий: Танки, Хилы, ДД, Торговцы, Гилдмастеры,
Квестгиверы, Кузнецы, Кожевники, Зельевары, Мастера заклинаний.
Также мы бы хотели иметь возможность отправлять пользователям новостные рассылки."

ТЗ требует добавить поле «текст, внутри которого могут быть картинки, встроенные видео и другой контент», а в Django
поля с таким функционалом по умолчанию нет. Чтобы решить эту задачу «без костылей», нужно сделать поле текста так
называемым WYSIWYG-полем.

WYSIWYG — это аббревиатура, означающая What You See Is What You Get, концепция, часто применяемая при создании
медиатизированных текстов или других визуально представляемых сущностей.
Готовые решения для таких видов полей https://djangopackages.org/grids/g/wysiwyg/

Аккаунт Superuser: Username: admin , Password: admin.

1. Рисуем mindmap с обобщенной картиной проекта Board_D16.xmind.
2. Создаем проект Django и приложения sign и board_app
3. Создаем модели, подключаем CKEditor, регистрируем модели в admin.py + PostAdminForm и PostAdmin для использования
CKEditor в админпанели.
В CKEditor добавлены плагины для загрузки файлов в текст: 'Youtube'(можно добавить видео с ютуб), 'Html5video'(работает
только если загружать пользовательское видео, а не добавлять уже загруженные видео) 'Uploadfile'.
Добавил в модель Post поле upload с FileField для загрузки видео(как дополнительный опциональный вариант).
4. Создаем миграции, применяем миграции суперпользователя.
4. Создаем представления, файлы html, и urls.
5. Создаем возможность регистрации: формы, вью с одноразовым паролем, модель для одноразовых паролей(code, user) с
удалением через время
6. Назначаем права, которые указываем в представлениях(доступно для аутентифицированных пользователей)
7. Сигналы и почтовые рассылки, рассылка новостей

О проекте:

# В модели объявления board_app/models имеются поле с CKEditor(позволяет загружать видео с ютуб, картинки, просто загружать видео,
перетаскивать документы в текст, чтобы сформировать ссылку на скачивание этого файла), дополнительное поле FileField для
загрузки видео mp4(можно оставлять пустым).
При создании объявления пользователь выбирает одну из категорий: Танки, Хилы, ДД, Торговцы, Гилдмастеры,
Квестгиверы, Кузнецы, Кожевники, Зельевары, Мастера заклинаний.

# board_app/admin созданы кастомные модели для панели администратора, позволяющие подключить CKEditor для редактирования
поля соотв. модели Post с полем RichTextUploadingField, а также реализовать автоподстановку автора при добавлении объекта.
https://ru.stackoverflow.com/questions/1164676/%D0%9A%D0%B0%D0%BA%D0%B8%D0%BC-%D1%81%D0%BF%D0%BE%D1%81%D0%BE%D0%B1%D0%BE%D0%BC-%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE-%D0%B0%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8-%D0%B7%D0%B0%D0%BF%D0%BE%D0%BB%D0%BD%D0%B8%D1%82%D1%8C-%D0%B0%D0%B2%D1%82%D0%BE%D1%80%D1%81%D1%82%D0%B2%D0%BE-%D1%81%D1%82%D0%B0%D1%82%D1%8C%D0%B8-django-models-py

# board_app/filters реализованы фильтры для главной страницы с объявлениями и страницы с откликами, позволяющие фильтровать
информацию по заданным полям. Чтобы подружить пагинацию с фильтрацией, в представления для соотв. страниц в функ-иях get_queryset
указывается фильтры и возврающаются отфитрованный queryset. Так же реализован кастомизированный тег url_replace для шаблона,
чтобы пагинация не очищала query string подставляемый фильтрами, а добавляла параметр page в конце этой строки. Пагинация
реализует вывод на странице по 3 объявления(стр. откликов и объявлений).

# board_app/forms добавлены формы для создания поста и отклика. Форма отклика вставляется в шаблон post_detail, в представлении
детальной информации об объявлении PostDetailView переопределяем метод post, добавив в него эту форму и автоподстановку автора отклика.
Отклик может оставить зарегистрированный пользователь, который не является автором этого объявлений и который еще не откликался.

# Объявление можно добавить, удалить, отредактировать зарегистрированному пользователю(в шаблонах стоит условие, классы представлений
наследуются от LoginRequiredMixin, функции-представления помечены соотв. декоратором.

# Страница с откликами доступна зарегистрированному пользователю, на ней отображены отклики на объявления текщего пользователя,
можно фильтровать их по id объявления, по статусу отклика. Так же можно их принимать и удалять(реализовано с помощью фукций-представлений
и кнопок в шаблоне).

# Регистрация:
https://github.com/pennersr/django-allauth/issues/2814
https://www.youtube.com/results?search_query=Email+OTP+verification+django
https://medium.com/@vasufauzan786/user-registration-and-verification-using-otp-in-django-without-use-of-any-fancy-django-utilities-7ce82161b25d
Аутентификация работает с помощью allauth(логин и логаут и соответсвующие шаблоны в templates/allauth/account), регистрация
работает с помощью приложения sign, в котором созданы: модель, 2 формы(форма для ввода отп и форма для регистрации учетных
данных пользователя), реализованы 2 представления: для отп и для обработки введных рег данных пользователя. Логика, требуемая
пользователем работает: пользователь вводит email и дважды пароль, если пользователя не существует в бд, то деактивируем
ему учетку(сохраняем пользователя в бд), получаем id пользователя из базы, отправляем пользователя на страницу с формой ввода
одноразовго пароля, одновременно с этим отправляем ему пароль на почту. Пользователь вводит правильный пароль, активируется и получает
письмо с благодарностью. Если нет, то учетка удаляется и регистрироваться придется заново.

# Сигналы
В board_app/signals реализованы сигналы, которые отправляют сообщения автору объявления об отклике и автору отклика о его принятии.

# Рассылка
Ежедневная рассылка с объявлениями за сутки реализвана с помощью apscheduler в board_app/management/commands/runapscheduler.py:


# "Также мы бы хотели иметь возможность отправлять пользователям новостные рассылки." - при создании нового объявления
делаем рассылку на всех(периодическая рассылка через Celery, либо переопределить метод save модели объявлений(самое
простое), либо сигнал, либо apscheduler)
# pip freeze > requirements.txt
django-allauth, django-user-accounts для регистрации

# регистрация и вход по почте
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'

ACCOUNT_EMAIL_UNIQUE ?
ACCOUNT_EMAIL_CONFIRMATION_REQUIRED ?


